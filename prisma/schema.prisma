generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Team {
  id         Int        @id @default(autoincrement())
  name       String     @unique
  email      String     @unique
  password   String
  phone      String?    @unique
  image      String?
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  categories Category[]
  events     Event[]
  payments   Payment[]
  users      User[]
}

model User {
  id            Int                @id @default(autoincrement())
  username      String             @unique
  password      String
  role          String
  email         String?
  teamId        Int
  athlete       Athlete?
  confirmations ConfirmationUser[]
  manager       Manager?
  payments      PaymentUser[]
  team          Team               @relation(fields: [teamId], references: [id])
}

model Athlete {
  id              Int               @id @default(autoincrement())
  firstName       String
  lastName        String
  phone           String            @unique
  federationId    String?
  birthDate       DateTime
  userId          Int               @unique
  shirtNumber     String?
  confederationId String?
  user            User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  categories      CategoryAthlete[]
}

model Manager {
  id         Int               @id @default(autoincrement())
  firstName  String
  lastName   String
  phone      String            @unique
  userId     Int               @unique
  user       User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  categories ManagerCategory[]
}

model Category {
  id       Int               @id @default(autoincrement())
  name     String
  teamId   Int
  team     Team              @relation(fields: [teamId], references: [id])
  athletes CategoryAthlete[]
  events   Event[]
  managers ManagerCategory[]
  payments Payment[]
}

model CategoryAthlete {
  athleteId  Int
  categoryId Int
  athlete    Athlete  @relation(fields: [athleteId], references: [id])
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@id([athleteId, categoryId])
}

model ManagerCategory {
  managerId  Int
  categoryId Int
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  manager    Manager  @relation(fields: [managerId], references: [id], onDelete: Cascade)

  @@id([managerId, categoryId])
}

model Payment {
  id         Int           @id @default(autoincrement())
  name       String
  value      Float         @default(0)
  dueDate    DateTime
  pixKey     String
  isFinalized  Boolean       @default(false)
  teamId     Int
  categoryId Int
  eventId    Int?
  category   Category      @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  event      Event?        @relation(fields: [eventId], references: [id])
  team       Team          @relation(fields: [teamId], references: [id])
  items      PaymentItem[]
  paidBy     PaymentUser[]
}

model PaymentItem {
  id                Int                @id @default(autoincrement())
  name              String
  value             Float
  quantityEnabled   Boolean            @default(false)
  paymentId         Int
  confirmationItems ConfirmationItem[]
  payment           Payment            @relation(fields: [paymentId], references: [id], onDelete: Cascade)
}

model PaymentUser {
  paymentId Int
  userId    Int
  paidAt    DateTime?
  payment   Payment   @relation(fields: [paymentId], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [id])

  @@id([paymentId, userId])
}

model Event {
  id            Int            @id @default(autoincrement())
  name          String
  description   String?
  date          DateTime
  location      String?
  type          String
   isFinalized  Boolean       @default(false)
  teamId        Int
  categoryId    Int
  confirmations Confirmation[]
  category      Category       @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  team          Team           @relation(fields: [teamId], references: [id])
  payments      Payment[]
}

model Confirmation {
  id          Int                @id @default(autoincrement())
  createdAt   DateTime           @default(now())
  eventId     Int
  event       Event              @relation(fields: [eventId], references: [id], onDelete: Cascade)
  confirmedBy ConfirmationUser[]
}

model ConfirmationUser {
  confirmationId Int
  userId         Int
  confirmedAt    DateTime?
  status         Boolean
  confirmedItems ConfirmationItem[]
  confirmation   Confirmation       @relation(fields: [confirmationId], references: [id], onDelete: Cascade)
  user           User               @relation(fields: [userId], references: [id])

  @@id([confirmationId, userId])
}

model ConfirmationItem {
  confirmationId   Int
  userId           Int
  paymentItemId    Int
  quantity         Int              @default(1)
  confirmationUser ConfirmationUser @relation(fields: [confirmationId, userId], references: [confirmationId, userId], onDelete: Cascade)
  paymentItem      PaymentItem      @relation(fields: [paymentItemId], references: [id], onDelete: Cascade)

  @@id([confirmationId, userId, paymentItemId])
}
