// schema.prisma

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Team {
  id         Int        @id @default(autoincrement())
  name       String     @unique
  email      String     @unique
  password   String
  phone      String?    @unique
  image      String?
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  users      User[]
  categories Category[]
  payments   Payment[]
  events     Event[]
}

model User {
  id            Int                @id @default(autoincrement())
  username      String             @unique
  password      String
  role          String             // 'MANAGER' ou 'ATHLETE'
  email         String?
  
  teamId        Int
  team          Team               @relation(fields: [teamId], references: [id])
  
  athlete       Athlete?
  manager       Manager?
  
  payments      PaymentUser[]
  confirmations ConfirmationUser[]
}

model Athlete {
  id              Int               @id @default(autoincrement())
  firstName       String
  lastName        String
  phone           String            @unique
  federationId    String?
  confederationId String?
  birthDate       DateTime
  shirtNumber     String?
  
  userId          Int               @unique
  user            User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  categories      CategoryAthlete[]
}

model Manager {
  id          Int                 @id @default(autoincrement())
  firstName   String
  lastName    String
  phone       String              @unique
  
  userId      Int                 @unique
  user        User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  categories  ManagerCategory[]
}

model Category {
  id        Int               @id @default(autoincrement())
  name      String
  
  teamId    Int
  team      Team              @relation(fields: [teamId], references: [id])

  athletes  CategoryAthlete[]
  payments  Payment[]
  events    Event[]
  managers  ManagerCategory[]
}

model CategoryAthlete {
  athleteId  Int
  athlete    Athlete           @relation(fields: [athleteId], references: [id])
  categoryId Int
  category   Category          @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  
  @@id([athleteId, categoryId])
}

model ManagerCategory {
  managerId   Int
  manager     Manager           @relation(fields: [managerId], references: [id], onDelete: Cascade)
  categoryId  Int
  category    Category          @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  
  @@id([managerId, categoryId])
}

model Payment {
  id         Int               @id @default(autoincrement())
  name       String
  value      Float             @default(0)
  dueDate    DateTime
  pixKey     String
  
  teamId     Int
  team       Team              @relation(fields: [teamId], references: [id])

  category   Category          @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId Int
  
  eventId    Int?
  event      Event?            @relation(fields: [eventId], references: [id], onDelete: SetNull)
  
  paidBy     PaymentUser[]
  items      PaymentItem[]
}

model PaymentItem {
  id         Int                 @id @default(autoincrement())
  name       String
  value      Float
  quantityEnabled Boolean @default(false)
  
  paymentId  Int
  payment    Payment             @relation(fields: [paymentId], references: [id], onDelete: Cascade)
  
  confirmationItems ConfirmationItem[]
}

model PaymentUser {
  paymentId Int
  payment   Payment @relation(fields: [paymentId], references: [id], onDelete: Cascade)
  userId    Int
  user      User    @relation(fields: [userId], references: [id])
  paidAt    DateTime?

  @@id([paymentId, userId])
}

model Event {
  id          Int            @id @default(autoincrement())
  name        String
  description String?
  date        DateTime
  location    String?
  type        String // 'TRAINING' ou 'CHAMPIONSHIP'
  
  teamId      Int
  team        Team           @relation(fields: [teamId], references: [id])

  categoryId  Int
  category    Category       @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  
  confirmations Confirmation[]
  payments      Payment[]
}

model Confirmation {
  id         Int                @id @default(autoincrement())
  createdAt  DateTime           @default(now())

  eventId    Int
  event      Event              @relation(fields: [eventId], references: [id], onDelete: Cascade)
  
  confirmedBy ConfirmationUser[]
}

model ConfirmationUser {
  confirmationId Int
  confirmation   Confirmation     @relation(fields: [confirmationId], references: [id], onDelete: Cascade)
  
  userId         Int
  user           User             @relation(fields: [userId], references: [id])
  
  confirmedAt    DateTime?
  status         Boolean
  
  confirmedItems ConfirmationItem[]

  @@id([confirmationId, userId])
}

model ConfirmationItem {
  confirmationId  Int
  userId          Int
  
  confirmationUser ConfirmationUser @relation(fields: [confirmationId, userId], references: [confirmationId, userId], onDelete: Cascade)
  
  paymentItemId   Int
  paymentItem     PaymentItem      @relation(fields: [paymentItemId], references: [id], onDelete: Cascade)
  
  quantity        Int @default(1)

  @@id([confirmationId, userId, paymentItemId])
}